[{"content":"Focus stacking rig #projects Brief: Reuse 3D printer components to learn how to make a basic mechatronic system\nMVP: A one axis slide for photography\nRequires:\nControl board\nalu frame\nProgress 2023-10-05 On a suggestion from a hackspace member I tried scanning the camera\u0026rsquo;s connection with wireshark. While I couldn\u0026rsquo;t connect both the laptop and the phone with the application at the same time so I can sniff a proven app, it did volunteer SSDP packages which I wasn\u0026rsquo;t able to request myself. From there I got the url for the device descriptor. Next I need to get the right api calls. HTTP/1.1 200 OK Accept-Range: none Content-Length: 2357 Content-Type: text/xml; charset=\u0026#34;utf-8\u0026#34; Connection: close Date: Thu, 01 Jan 1970 00:18:41 GMT Server: UPnP/1.0 MINT-X/1.8.1 \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u0026lt;root xmlns=\u0026#34;urn:schemas-upnp-org:device-1-0\u0026#34;\u0026gt; \u0026lt;specVersion\u0026gt; \u0026lt;major\u0026gt;1\u0026lt;/major\u0026gt; \u0026lt;minor\u0026gt;0\u0026lt;/minor\u0026gt; \u0026lt;/specVersion\u0026gt; \u0026lt;device\u0026gt; \u0026lt;deviceType\u0026gt;urn:schemas-upnp-org:device:Basic:1\u0026lt;/deviceType\u0026gt; \u0026lt;friendlyName\u0026gt;ILCE-6000_2\u0026lt;/friendlyName\u0026gt; \u0026lt;manufacturer\u0026gt;Sony Corporation\u0026lt;/manufacturer\u0026gt; \u0026lt;manufacturerURL\u0026gt;http://www.sony.net/\u0026lt;/manufacturerURL\u0026gt; \u0026lt;modelDescription\u0026gt;SonyDigitalMediaServer\u0026lt;/modelDescription\u0026gt; \u0026lt;modelName\u0026gt;SonyImagingDevice\u0026lt;/modelName\u0026gt; \u0026lt;UDN\u0026gt;uuid:000000001000-1010-8000-9AF1702626E7\u0026lt;/UDN\u0026gt; \u0026lt;serviceList\u0026gt; \u0026lt;service\u0026gt; \u0026lt;serviceType\u0026gt;urn:schemas-sony-com:service:ScalarWebAPI:1\u0026lt;/serviceType\u0026gt; \u0026lt;serviceId\u0026gt;urn:schemas-sony-com:serviceId:ScalarWebAPI\u0026lt;/serviceId\u0026gt; \u0026lt;SCPDURL/\u0026gt; \u0026lt;controlURL/\u0026gt; \u0026lt;eventSubURL/\u0026gt; \u0026lt;/service\u0026gt; \u0026lt;service\u0026gt; \u0026lt;serviceType\u0026gt;urn:schemas-sony-com:service:DigitalImaging:1\u0026lt;/serviceType\u0026gt; \u0026lt;serviceId\u0026gt;urn:schemas-sony-com:serviceId:DigitalImaging\u0026lt;/serviceId\u0026gt; \u0026lt;SCPDURL\u0026gt;/DigitalImagingDesc.xml\u0026lt;/SCPDURL\u0026gt; \u0026lt;controlURL\u0026gt;/upnp/control/DigitalImaging\u0026lt;/controlURL\u0026gt; \u0026lt;eventSubURL\u0026gt;\u0026lt;/eventSubURL\u0026gt; \u0026lt;/service\u0026gt; \u0026lt;/serviceList\u0026gt; \u0026lt;av:X_ScalarWebAPI_DeviceInfo xmlns:av=\u0026#34;urn:schemas-sony-com:av\u0026#34;\u0026gt; \u0026lt;av:X_ScalarWebAPI_Version\u0026gt;1.0\u0026lt;/av:X_ScalarWebAPI_Version\u0026gt; \u0026lt;av:X_ScalarWebAPI_ServiceList\u0026gt; \u0026lt;av:X_ScalarWebAPI_Service\u0026gt; \u0026lt;av:X_ScalarWebAPI_ServiceType\u0026gt;guide\u0026lt;/av:X_ScalarWebAPI_ServiceType\u0026gt; \u0026lt;av:X_ScalarWebAPI_ActionList_URL\u0026gt;http://192.168.122.1:8080/sony\u0026lt;/av:X_ScalarWebAPI_ActionList_URL\u0026gt; \u0026lt;av:X_ScalarWebAPI_AccessType/\u0026gt; \u0026lt;/av:X_ScalarWebAPI_Service\u0026gt; \u0026lt;av:X_ScalarWebAPI_Service\u0026gt; \u0026lt;av:X_ScalarWebAPI_ServiceType\u0026gt;accessControl\u0026lt;/av:X_ScalarWebAPI_ServiceType\u0026gt; \u0026lt;av:X_ScalarWebAPI_ActionList_URL\u0026gt;http://192.168.122.1:8080/sony\u0026lt;/av:X_ScalarWebAPI_ActionList_URL\u0026gt; \u0026lt;av:X_ScalarWebAPI_AccessType/\u0026gt; \u0026lt;/av:X_ScalarWebAPI_Service\u0026gt; \u0026lt;av:X_ScalarWebAPI_Service\u0026gt; \u0026lt;av:X_ScalarWebAPI_ServiceType\u0026gt;camera\u0026lt;/av:X_ScalarWebAPI_ServiceType\u0026gt; \u0026lt;av:X_ScalarWebAPI_ActionList_URL\u0026gt;http://192.168.122.1:8080/sony\u0026lt;/av:X_ScalarWebAPI_ActionList_URL\u0026gt; \u0026lt;av:X_ScalarWebAPI_AccessType/\u0026gt; \u0026lt;/av:X_ScalarWebAPI_Service\u0026gt; \u0026lt;/av:X_ScalarWebAPI_ServiceList\u0026gt; \u0026lt;/av:X_ScalarWebAPI_DeviceInfo\u0026gt; \u0026lt;/device\u0026gt; \u0026lt;/root\u0026gt; + This isn't very useful other than confirming what was already known from the timelapse app. + So I suspect my POST is malformed. I switched to reading the API and the doc recommends I call `getApplicationInfo` which didn't work. + Trying to call using cURL resulted in a successful api call! curl -X POST \\ -d \u0026#39;{\u0026#34;method\u0026#34;: \u0026#34;getApplicationInfo\u0026#34;, \u0026#34;params\u0026#34;: [], \u0026#34;id\u0026#34;: 1, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;}\u0026#39; \\ http://192.168.122.1:8080/sony/camera {\u0026#34;result\u0026#34;:[\u0026#34;Smart Remote Control SR\\/4.10 __SAK__\u0026#34;,\u0026#34;2.1.4\u0026#34;],\u0026#34;id\u0026#34;:1}% + The docs say most cameras don't need this but mine does: curl -v -H \u0026#34;Content-Type: application/json\u0026#34; -X POST \\ -d \u0026#39;{\u0026#34;method\u0026#34;: \u0026#34;startRecMode\u0026#34;, \u0026#34;params\u0026#34;: [], \u0026#34;id\u0026#34;: 1, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;}\u0026#39; \\ http://192.168.122.1:8080/sony/camera Note: Unnecessary use of -X or --request, POST is already inferred. * Trying 192.168.122.1:8080... * Connected to 192.168.122.1 (192.168.122.1) port 8080 (#0) \u0026gt; POST /sony/camera HTTP/1.1 \u0026gt; Host: 192.168.122.1:8080 \u0026gt; User-Agent: curl/8.1.2 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; Content-Length: 105 \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Connection: close \u0026lt; Content-Length: 21 \u0026lt; Content-Type: application/json \u0026lt; * Closing connection 0 {\u0026#34;result\u0026#34;:[0],\u0026#34;id\u0026#34;:1}% + I'm now in live view! + I also wanted to test which header values are mandatory. So I reformulated the request to contain all the data in one line, then had to find a way to send raw TCP requests. curl -v -H \u0026#34;Content-Type: application/json\u0026#34; -X POST \\ -d \u0026#39;{\u0026#34;method\u0026#34;: \u0026#34;startRecMode\u0026#34;, \u0026#34;params\u0026#34;: [], \u0026#34;id\u0026#34;: 1, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;}\u0026#39; \\ http://192.168.122.1:8080/sony/camera Note: Unnecessary use of -X or --request, POST is already inferred. * Trying 192.168.122.1:8080... * Connected to 192.168.122.1 (192.168.122.1) port 8080 (#0) \u0026gt; POST /sony/camera HTTP/1.1 \u0026gt; Host: 192.168.122.1:8080 \u0026gt; User-Agent: curl/8.1.2 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; Content-Length: 67 \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Connection: close \u0026lt; Content-Length: 21 \u0026lt; Content-Type: application/json \u0026lt; * Closing connection 0 {\u0026#34;result\u0026#34;:[0],\u0026#34;id\u0026#34;:1}% + I found a post saying I can do it by using telnet: curl telnet://192.168.122.1:8080 \u0026lt;\u0026lt;\u0026lt; \u0026#39;POST /sony/camera HTTP/1.1 Host: 192.168.122.1:8080 User-Agent: curl/8.1.2 Content-Length: 67 {\u0026#34;method\u0026#34;: \u0026#34;startRecMode\u0026#34;, \u0026#34;params\u0026#34;: [], \u0026#34;id\u0026#34;: 1, \u0026#34;version\u0026#34;: \u0026#34;1.0\u0026#34;}\u0026#39; HTTP/1.1 200 OK Connection: close Content-Length: 21 Content-Type: application/json {\u0026#34;result\u0026#34;:[0],\u0026#34;id\u0026#34;:1}% + After a bit of fiddling, success! I (10270) camera rig: got ip:192.168.122.131 I (10270) esp_netif_handlers: sta ip: 192.168.122.131, mask: 255.255.255.0, gw: 192.168.122.1 I (12690) camera rig: ... allocated socket I (12690) camera rig: ... connected I (12700) camera rig: ... socket send success I (12700) camera rig: ... set socket receiving timeout success HTTP/1.1 200 OK Connection: close Content-Length: 21 Content-Type: application/json {\u0026#34;result\u0026#34;:[0],\u0026#34;id\u0026#34;:1}I (12940) camera rig: ... done reading from socket. Last read return=0 errno=128. The trick was a \\r\\n at the end\n+ I refactored the code to call two commands, one to set up the camera and the other to take the picture with `actTakePicture` + Still waiting on motor controllers so its a good time to pause the project for a few days and rest. + ## 2023-10-04 + ### Building the combined app + I took 3 projects (i2c_oled, fast_scan and http_request) and combined them + I had to configure the platform, then build. This failed as my app was too big. I changed that in the `menuconfig` in Partition table -\u0026gt; Single Factory App Large + OK! so i have the following functionality: + Display information + Connected to wifi and got ip! I (4268) camera rig: got ip:192.168.0.57 I (4268) esp_netif_handlers: sta ip: 192.168.0.57, mask: 255.255.255.0, gw: 192.168.0.1 + got http request! I (16312) camera rig: ... connected I (16322) camera rig: ... socket send success I (16322) camera rig: ... set socket receiving timeout success HTTP/1.0 404 Not Found Cache-Control: max-age=604800 Content-Type: text/html; charset=UTF-8 Date: Wed, 04 Oct 2023 14:28:18 GMT Expires: Wed, 11 Oct 2023 14:28:18 GMT Server: EOS (vny/044F) Vary: Accept-Encoding Content-Length: 1256 Connection: close \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Example Domain\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-type\u0026#34; content=\u0026#34;text/html; charset=utf-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; body { background-color: #f0f0f2; margin: 0; padding: 0; font-family: -apple-system, system-ui, BlinkMacSystemFont, \u0026#34;Segoe UI\u0026#34;, \u0026#34;Open Sans\u0026#34;, \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, sans-serif; } div { width: 600px; margin: 5em auto; padding: 2em; background-color: #fdfdff; border-radius: 0.5em; box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02); } a:link, a:visited { color: #38488f; text-decoration: none; } @media (max-width: 700px) { div { margin: 0 auto; width: auto; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Example Domain\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://www.iana.org/domains/example\u0026#34;\u0026gt;More information...\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; I (16652) camera rig: ... done reading from socket. Last read return=0 errno=128. + The camera uses the SSDP service discovery process. This requires a UDP send/recv set up on top of the HTTP requests. The send is on a multicast address. After looking at some examples and stressing out, I remembered an old android app I used to work on https://github.com/ThibaudM/timelapse-sony that had to go through the same process. Looking at their implementation they offload the SSDP service to another app and store the addresses in a list. So I retrieved my camera's IP from there. + + ## 2023-10-03 + Goal for today was to set up the dev environment for the controller + The controller I'm using is the Seeed Xiao ESP32C3 + The dev environment is a linux VM inside UTM VM environment. This posed a challenge in connecting the ESP32C3 because I had to pipe the USB. This was a setting in the Input tab of the VM config. Then I have to manually connect the USB after each load from the USB dropdown of the VM. + Getting examples to work was not straightforward. I was using the SSD1306 OLED which had an IIC address on the back selected with resistor pins, but the OLED had a completely different address of 3C. + Success! + ![IMG_20231003_233005496.jpg](/assets/img_20231003_233005496_1696372838944_0.jpg) + Next up tomorrow is to set up a wifi connection example + ### 2023-10-02 + Disassembled TronXY S5 3d printer and scavenged parts + ![IMG_20231002_221639851.jpg](/assets/img_20231002_221639851_1696332184660_0.jpg) + Ordered some motor controllers + Plan for software/control + Use ESP32C3 to control both motor and camera via wifi. + Use Sony QX1 that I have to keep it light and trigger commands via wifi api from the rig controller. ","permalink":"https://ilidur.github.io/pages/projects-blog/","summary":"Focus stacking rig #projects Brief: Reuse 3D printer components to learn how to make a basic mechatronic system\nMVP: A one axis slide for photography\nRequires:\nControl board\nalu frame\nProgress 2023-10-05 On a suggestion from a hackspace member I tried scanning the camera\u0026rsquo;s connection with wireshark. While I couldn\u0026rsquo;t connect both the laptop and the phone with the application at the same time so I can sniff a proven app, it did volunteer SSDP packages which I wasn\u0026rsquo;t able to request myself.","title":"Projects blog"}]